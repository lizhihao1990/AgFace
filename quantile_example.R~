# Quantile regression example

library(quantreg)

# create some data with a peak in the middle
df <- data.frame(x = rnorm(1000, mean = 50),
                 y = rnorm(1000, mean = 35, sd = 3))

plot(y ~ x, data = df)

# modify the data, so that we have a peak in the middle
my.length <- length(df$y[df$x > 49 & df$x < 51])
df$y[df$x > 49 & df$x < 51] <- df$y[df$x > 49 & df$x < 51] * rnorm(my.length, mean = 1.5, sd = 0.2)
plot(y ~ x, data = df)



# quadratic Y = a + bX + cX2
# a = 6, b = 0.2, c = 50.37
nls.fit <- nls(y ~ a + b * x + c*x^2,
           data = df,
           #weights = weights,
           start = list(a = -2, b = 1, c = 48),
           control = nls.control(maxiter = 700,
                                 warnOnly = TRUE,
                                 minFactor = 6.10352e-09))

predict_range <- data.frame(x = seq(min(df$x), max(df$x), length = 100))

# calculate for each x-range value the corresponding y-range
my.mean.fit <- within(predict_range, y <- predict(nls.fit, newdata = predict_range))

lines(y ~ x, data = my.mean.fit, col = "blue", lwd = 2)

# using quantreg
my.model <- nlrq(y ~ a + b * x + c * x^2,
            data  = df,
            start = list(a = -2, b = 1, c = 48),
            tau   = .95)

my.upper95.fit <- within(predict_range, y <- predict(my.model, newdata = predict_range))

lines(y ~ x, data = my.upper95.fit, col = "red", lwd = 2)

# adding weights to the data
df$weights <- 1

# adding more weight to the data around the mean
df$weights[my.df$x > 49 & my.df$x < 51] <- 2
df$weights[my.df$x > 49.8 & my.df$x < 50.2] <- 10

# hyperbola
# modify the data again to resemble a plateau at high x
my.length51 <- length(df$y[df$x > 51])
df$y[df$x > 51] <- df$y[df$x > 51] * rnorm(my.length51, mean = 2, sd = 0.3)
plot(y ~ x, data = df)

nls.fit <- nls(y ~ (a * x) / (b + x),
           data = df,
           #weights = weights,
           start = list(a = 50, b = 25),
           control = nls.control(maxiter = 700,
                                 warnOnly = TRUE,
                                 minFactor = 6.10352e-09))

predict_range <- data.frame(x = seq(min(df$x), max(df$x), length = 100))

# calculate for each x-range value the corresponding y-range
my.mean.fit <- within(predict_range, y <- predict(nls.fit, newdata = predict_range))

lines(y ~ x, data = my.mean.fit, col = "blue", lwd = 2)
